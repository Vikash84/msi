#!/usr/bin/env bash
# 


function usage {
    echo "xxx [ -s  -t root_dir  -p prot -d data_dir -c -h] -i raw_data_toplevel_folder"
    cat <<EOF
 -i tl_dir - toplevel directory with the nanopore data. fastq files will be searched in \$tl_dir/*/fastq_pass. It is expected that the tree directory is organized as \$tl_dir/sample_name/fastq_pass.
 -m min_len    - minimum length of the reads
 -M max_len    - maximum length of the reads
 -q min_qual   - minimum quality
 -o out_folder -  output folder
 -b blast_database - path to the blast database
 -t threads        - maximum number of threads
 -h  - provides usage information
EOF
}


function tidy_results {
    fasta_file=$1
    blast_tsv=$2
    out_file=$3
    #pident means Percentage of identical matches
    #nident means Number of identical matches
    #mismatch means Number of mismatches
    echo read nreads nbatches qseqid sseqid evalue bitscore pident nident mismatch qlen length sgi pid staxids ssciname scomnames stitle  | tr " " "\t" > $out_file.tmp
    grep "^>" $fasta_file | sed "s/^>//" | cut -f 1 -d\  > $out_file.tmp2
    sed -E "s/^.*:(size=.*:size=.*)$/\1/;s/:/\t/g;s/size=//g;s/members=//"  $out_file.tmp2  > $out_file.tmp3    
    paste -d "\t" $out_file.tmp2 $out_file.tmp3 | sed -E "s/:size=[^\t]+//"| sort -u -k 1b,1 > $out_file.tmp1
    sort -k 1b,1 $blast_tsv | sed -E "s/:size=[^\t]+//" > $out_file.tmp2
    join -t $'\t' -a 1 -e X $out_file.tmp1 $out_file.tmp2  >> $out_file.tmp
    #join -t\t $out_file.tmp2 $out_file.tmp1  >> $out_file.tmp
    ## add lineage information when possible
    echo taxid lineage kingdom phylum class order family genus species subspecies | tr " " "\t" > $out_file.tmp3 
    cut -f 15 $out_file.tmp | tail -n +2 | sed "s/^$/unclassified/" | taxonkit lineage --data-dir $TAXONOMY_DATA_DIR |  taxonkit reformat  --data-dir $TAXONOMY_DATA_DIR  --lineage-field 2  --format   "{k}\t{p}\t{c}\t{o}\t{f}\t{g}\t{s}\t{S}" >> $out_file.tmp3
    paste -d "\t" $out_file.tmp $out_file.tmp3 > $out_file.tmp2
    
    mv $out_file.tmp2 $out_file
    rm -f $out_file.tmp*
}
